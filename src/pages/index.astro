---
import Layout from '~/layouts/PageLayout.astro';
import { useState, useEffect, useRef } from 'react';
import { ChevronUp } from 'lucide-react';

const metadata = {
  title: 'Book of Chads'
};

const stories = [
  {
    id: 1,
    author: "DisperseControl",
    period: "2017-2024",
    title: "The -300K Bear Slayer",
    subtitle: "From Rekt to Revival",
    story: "When I first got started in 2017 I had a net worth of close to -$300K (negative) and could barely scrape together $200 to buy anything. Then in 2019/20 lost my job and house lol. Thanks to crypto I have pretty much flipped the entire situation in the other direction. I have a visceral hatred for bears",
    theme: "from-green-400 to-blue-500",
    emoji: "🗡️",
    readingTime: "1 min"
  },
  {
    id: 2,
    author: "floatxbt",
    period: "2024",
    title: "Built Different",
    subtitle: "Never Stop The Grind",
    story: "Bro im built different, i lost every single satoshi u see here but got up everyday hungry and hunting with a positive attitude",
    theme: "from-yellow-400 to-red-500",
    emoji: "⚔️",
    readingTime: "1 min"
  },
  {
    id: 3,
    author: "c0gnate",
    period: "2015",
    title: "The Generous Tipper",
    subtitle: "When Bitcoin Was Young",
    story: "in 2015 one of my homies ordered me 1/2oz of weed on darkweb, i gave him like $220 to buy 1 BTC. the order came to like 0.8BTC and i just said keep the change cos i had no idea keke... the weed was chronic tho tbh",
    theme: "from-purple-400 to-pink-500",
    emoji: "🌿",
    readingTime: "1 min"
  }
];

const BackgroundPattern = () => (
  <div class="absolute inset-0 opacity-10">
    <div class="absolute inset-0 grid grid-cols-12 gap-1">
      {Array.from({ length: 144 }).map((_, i) => (
        <div 
          key={i} 
          class="aspect-square bg-gradient-to-br from-white/10 to-transparent"
          style={{
            animationDelay: `${Math.random() * 5}s`,
            animationDuration: `${5 + Math.random() * 5}s`
          }}
        />
      ))}
    </div>
  </div>
);

// Client-side component for interactive elements
const InteractiveElements = () => {
  const [showBackToTop, setShowBackToTop] = useState(false);
  const [currentStoryIndex, setCurrentStoryIndex] = useState(0);
  const touchStart = useRef(null);

  useEffect(() => {
    const handleScroll = () => {
      setShowBackToTop(window.scrollY > window.innerHeight);
    };

    const handleKeyboard = (e) => {
      if (e.key === 'ArrowDown' || e.key === 'ArrowRight') {
        navigateStory('next');
      } else if (e.key === 'ArrowUp' || e.key === 'ArrowLeft') {
        navigateStory('prev');
      }
    };

    window.addEventListener('scroll', handleScroll);
    window.addEventListener('keydown', handleKeyboard);

    return () => {
      window.removeEventListener('scroll', handleScroll);
      window.removeEventListener('keydown', handleKeyboard);
    };
  }, []);

  const navigateStory = (direction) => {
    const currentStory = document.querySelector('[data-active="true"]');
    if (!currentStory) return;

    const nextStory = direction === 'next' 
      ? currentStory.nextElementSibling
      : currentStory.previousElementSibling;

    if (nextStory && nextStory.id.startsWith('story-')) {
      nextStory.scrollIntoView({ behavior: 'smooth' });
    }
  };

  const handleTouchStart = (e) => {
    touchStart.current = e.touches[0].clientY;
  };

  const handleTouchMove = (e) => {
    if (!touchStart.current) return;
    
    const touchEnd = e.touches[0].clientY;
    const diff = touchStart.current - touchEnd;
    
    if (Math.abs(diff) > 50) {
      navigateStory(diff > 0 ? 'next' : 'prev');
      touchStart.current = null;
    }
  };

  return (
    <>
      {/* Floating Navigation */}
      <div className="fixed right-8 top-1/2 transform -translate-y-1/2 z-50 hidden lg:block">
        <div className="flex flex-col gap-2">
          {stories.map((story, index) => (
            <a
              key={story.id}
              href={`#story-${story.id}`}
              className={`w-3 h-3 rounded-full transition-all duration-300 ${
                currentStoryIndex === index
                  ? 'bg-yellow-400 scale-125'
                  : 'bg-yellow-400/30 hover:bg-yellow-400/50'
              }`}
              title={story.title}
            />
          ))}
        </div>
      </div>

      {/* Back to Top Button */}
      {showBackToTop && (
        <button
          onClick={() => window.scrollTo({ top: 0, behavior: 'smooth' })}
          className="fixed bottom-20 right-8 z-50 p-2 bg-yellow-400 text-black rounded-full shadow-lg hover:shadow-xl transition-all transform hover:-translate-y-1 pixel-edges group"
        >
          <ChevronUp className="w-6 h-6 group-hover:scale-110 transition-transform" />
        </button>
      )}
    </>
  );
};
---

<Layout {metadata}>
  <div class="min-h-screen bg-black text-white overflow-hidden font-pixel">
    {/* Cover Page */}
    <section class="min-h-screen flex flex-col items-center justify-center p-4 relative overflow-hidden">
      {/* Animated Background Grid */}
      <div class="absolute inset-0">
        <div class="absolute inset-0 bg-gradient-to-br from-blue-500/20 to-purple-600/20"></div>
        <div class="absolute inset-0 grid grid-cols-[repeat(20,1fr)] grid-rows-[repeat(20,1fr)] animate-pulse-slow opacity-10">
          {Array.from({ length: 400 }).map((_, i) => (
            <div
              key={i}
              class="border-[0.5px] border-white/10"
              style={{
                animation: `pulseCell ${3 + Math.random() * 2}s infinite ${Math.random() * 2}s`
              }}
            />
          ))}
        </div>
      </div>

      {/* Floating particles */}
      <div class="absolute inset-0 overflow-hidden">
        {Array.from({ length: 20 }).map((_, i) => (
          <div
            key={i}
            class="absolute w-1 h-1 bg-yellow-400/30 rounded-full animate-float"
            style={{
              top: `${Math.random() * 100}%`,
              left: `${Math.random() * 100}%`,
              animationDelay: `${Math.random() * 5}s`,
              animationDuration: `${5 + Math.random() * 5}s`
            }}
          />
        ))}
      </div>

      {/* Title with enhanced effects */}
      <div class="relative group">
        <div class="absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 blur-2xl opacity-30 group-hover:opacity-40 transition-opacity"></div>
        <h1 class="text-6xl md:text-8xl font-black text-transparent bg-clip-text bg-gradient-to-r from-yellow-400 to-orange-500 text-center pixel-edges relative">
          THE BOOK OF CHADS
        </h1>
      </div>

      <button 
        onclick="document.getElementById('story-3').scrollIntoView({ behavior: 'smooth' })"
        class="mt-12 group relative"
      >
        <div class="absolute inset-0 bg-gradient-to-r from-yellow-400 to-orange-500 blur-lg opacity-50 group-hover:opacity-75 transition-all"></div>
        <span class="relative px-8 py-4 bg-gradient-to-r from-yellow-400 to-orange-500 text-black font-bold block transform group-hover:scale-105 transition-all pixel-edges">
          START READING
        </span>
      </button>
    </section>

    {/* Stories */}
    {stories.slice().reverse().map((story, index, reversedArray) => (
      <section
        class="min-h-screen flex items-center justify-center p-4 relative snap-start"
        id={`story-${story.id}`}
      >
        {/* Dynamic grid background */}
        <div class="absolute inset-0">
          <div class="absolute inset-0 grid grid-cols-[repeat(40,1fr)] grid-rows-[repeat(40,1fr)] opacity-5">
            {Array.from({ length: 1600 }).map((_, i) => (
              <div
                key={i}
                class="border-[0.5px] border-white/5"
                style={{
                  background: `linear-gradient(${Math.random() * 360}deg, ${story.theme.split(' ')[1]}/5 0%, transparent 100%)`
                }}
              />
            ))}
          </div>
        </div>

        {/* Story Card with enhanced effects */}
        <div class="max-w-3xl w-full perspective">
          <div class="relative backdrop-blur-lg bg-white/5 border-2 border-yellow-400/30 p-8 md:p-12 transform transition-all hover:scale-[1.02] group hover:-rotate-y-2">
            {/* Progress line */}
            <div class="absolute top-0 left-0 w-full h-[2px] bg-gradient-to-r from-transparent via-yellow-400/50 to-transparent"></div>
            
            {/* Content remains mostly the same but with enhanced styling */}
            {...}
          </div>
        </div>
      </section>
    ))}

    {/* Enhanced footer button */}
    <div class="fixed bottom-4 right-4 z-50">
      <a
        href="https://www.tensor.trade/trade/chads"
        target="_blank"
        rel="noopener noreferrer"
        class="group relative inline-block"
      >
        <div class="absolute inset-0 bg-yellow-400 blur-lg opacity-50 group-hover:opacity-75 transition-all"></div>
        <span class="relative px-6 py-3 bg-yellow-400 text-black font-bold block border-2 border-black transform group-hover:translate-y-[-2px] group-hover:translate-x-[2px] transition-all pixel-edges">
          BECOME A CHAD
          <span class="inline-block transform group-hover:translate-x-1 transition-transform">↗</span>
        </span>
      </a>
    </div>
  </div>
</Layout>

<style>
  @keyframes pulseCell {
    0%, 100% { opacity: 0.1; }
    50% { opacity: 0.3; }
  }

  @keyframes float {
    0%, 100% { 
      transform: translate(0, 0); 
      opacity: 0.3;
    }
    50% { 
      transform: translate(10px, -10px); 
      opacity: 0.6;
    }
  }

  .perspective {
    perspective: 2000px;
  }

  .rotate-y-2 {
    transform: rotateY(2deg);
  }

  .pixel-edges {
    image-rendering: pixelated;
    -webkit-font-smoothing: none;
  }

  /* Scrollbar styling */
  ::-webkit-scrollbar {
    width: 8px;
  }

  ::-webkit-scrollbar-track {
    background: rgba(0, 0, 0, 0.2);
  }

  ::-webkit-scrollbar-thumb {
    background: rgba(250, 204, 21, 0.5);
    border-radius: 4px;
  }

  ::-webkit-scrollbar-thumb:hover {
    background: rgba(250, 204, 21, 0.8);
  }

  /* Smooth scrolling */
  html {
    scroll-behavior: smooth;
    scroll-snap-type: y mandatory;
  }

  section {
    scroll-snap-align: start;
  }

  @media (max-width: 768px) {
    html {
      scroll-snap-type: y proximity;
    }
  }

  /* Text selection styling */
  ::selection {
    background: rgba(250, 204, 21, 0.3);
    color: #ffffff;
  }
</style>