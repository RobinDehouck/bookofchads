---
import Metadata from '~/components/common/Metadata.astro';
import Layout from '~/layouts/PageLayout.astro';

interface Story {
  id: number;
  author: string;
  period: string;
  title: string;
  subtitle: string;
  story: string;
  theme: string;
  emoji: string;
}

const stories = [
  {
    id: 1,
    author: "DisperseControl",
    period: "2017-2024",
    title: "The -300K Bear Slayer",
    subtitle: "From Rekt to Revival",
    story: "When I first got started in 2017 I had a net worth of close to -$300K (negative) and could barely scrape together $200 to buy anything. Then in 2019/20 lost my job and house lol. Thanks to crypto I have pretty much flipped the entire situation in the other direction. I have a visceral hatred for bears",
    theme: "from-[#2A9D8F] to-[#264653]",
    emoji: "🗡️"
  },
  {
    id: 2,
    author: "floatxbt",
    period: "2024",
    title: "Built Different",
    subtitle: "Never Stop The Grind",
    story: "Bro im built different, i lost every single satoshi u see here but got up everyday hungry and hunting with a positive attitude",
    theme: "from-[#E9C46A] to-[#F4A261]",
    emoji: "⚔️"
  },
  {
    id: 3,
    author: "c0gnate",
    period: "2015",
    title: "The Generous Tipper",
    subtitle: "When Bitcoin Was Young",
    story: "in 2015 one of my homies ordered me 1/2oz of weed on darkweb, i gave him like $220 to buy 1 BTC. the order came to like 0.8BTC and i just said keep the change cos i had no idea keke... the weed was chronic tho tbh",
    theme: "from-[#ffc131] to-[#E63946]",
    emoji: "🌿"
  }
].reverse();

const CHAD_QUOTES = [
  "We're All Gonna Make It Brah 💪",
  "1 BTC = 1 BTC 🎯",
  "Fortune Favors the Brave ⚔️",
  "WAGMI 🚀",
  "Stay SAFU Kings 👑",
  "Bears Get Rekt 🗡️",
  "Never Sell, Only Buy 💎",
  "Up Only 📈"
];

const REACTIONS = ['🔥', '💎', '🚀', '🐻'];

const metadata = {
  title: 'Book of CHADS',
  description: 'Legendary tales of crypto warriors',
}
---

<Layout {metadata}>
  <div class="min-h-screen bg-[#F5F1E3] text-[#2C3639] overflow-x-hidden font-pixel">
    <canvas id="matrixCanvas" class="fixed inset-0 pointer-events-none opacity-10"></canvas>

    <!-- Power Level Bar -->
    <div class="fixed top-0 left-0 right-0 z-50 bg-black/80 text-[#ffc131] pixel-edges">
      <div class="max-w-7xl mx-auto px-4 py-2">
        <div class="flex items-center gap-4">
          <span class="text-xs md:text-sm uppercase tracking-wider">CHAD Level:</span>
          <div class="flex-1 bg-white/10 h-2 rounded-full overflow-hidden">
            <div class="power-bar h-full bg-gradient-to-r from-[#ffc131] via-[#ff6b6b] to-[#ffc131] bg-size-200" style="width: 0%"></div>
          </div>
          <span class="power-level text-xs md:text-sm font-bold">9000</span>
        </div>
      </div>
    </div>

    <!-- Cover Page -->
    <section class="min-h-screen flex flex-col items-center justify-center p-4 relative">
      <div class="absolute inset-0">
        <div class="absolute inset-0 grid grid-cols-[repeat(32,1fr)] grid-rows-[repeat(32,1fr)] opacity-10">
          {Array.from({ length: 1024 }).map(() => (
            <div class="border-[0.5px] border-[#2C3639]/10 hover:bg-[#ffc131]/20 transition-colors duration-300"></div>
          ))}
        </div>
      </div>

      <div class="relative z-10 text-center max-w-4xl mx-auto px-4">
        <h1 class="text-6xl md:text-8xl font-black text-[#2C3639] pixel-edges mb-8 glitch-text" data-text="BOOK OF CHADS">
          BOOK OF CHADS
        </h1>

        <div class="bg-white p-8 pixel-border mb-12 transform hover:translate-y-[-2px] transition-all duration-300 relative group">
          <p class="text-2xl md:text-3xl pixel-edges chad-gradient">Don't let your memes be dreams</p>
        </div>

        <a 
          href="#story-3"
          class="inline-block px-8 py-4 bg-[#ffc131] text-white font-bold text-xl pixel-border hover:translate-y-[-2px] hover:shadow-xl transition-all duration-200"
        >
          START READING
        </a>
      </div>
    </section>

    <!-- Stories -->
    {stories.map((story, index) => (
      <section class="min-h-screen flex items-center justify-center p-4 relative snap-start" id={`story-${story.id}`}>
        <div class="max-w-4xl w-full">
          <div class="bg-white pixel-border p-8 relative group hover:translate-y-[-4px] transition-all duration-300">
            <div class="flex justify-between items-start mb-8">
              <div>
                <span class="text-5xl mb-4 animate-float">{story.emoji}</span>
                <h2 class="text-3xl md:text-4xl font-bold mt-4 text-[#2C3639] pixel-edges">
                  {story.title}
                </h2>
                <p class="text-xl text-[#2C3639]/70 mt-2 pixel-edges">{story.subtitle}</p>
                <p class="text-[#2C3639]/60 mt-2 pixel-edges">{story.period}</p>
              </div>
              
              <a 
                href={`https://twitter.com/${story.author}`}
                target="_blank"
                rel="noopener noreferrer"
                class="text-xl hover:text-[#ffc131] transition-colors pixel-edges inline-flex items-center gap-1"
              >
                <span class="text-[#ffc131]">𝕏</span>
                {story.author}
              </a>
            </div>

            <div class="relative">
              <div class="absolute -left-4 top-0 bottom-0 w-1 bg-gradient-to-b from-transparent via-[#ffc131] to-transparent opacity-50"></div>
              <p class="text-xl md:text-2xl leading-relaxed pixel-edges">
                "{story.story}"
              </p>
            </div>

            <div class="mt-8 flex flex-wrap gap-4">
              {REACTIONS.map((emoji) => (
                <button class="reaction-btn flex items-center gap-2 px-4 py-2 bg-white rounded-lg border-2 border-[#2C3639] hover:bg-[#ffc131]/10 transition-colors">
                  <span class="text-2xl">{emoji}</span>
                  <span class="text-sm font-bold">0</span>
                </button>
              ))}
            </div>

            <nav class="mt-12 flex justify-between text-sm pixel-edges">
              {index > 0 && (
                <a href={`#story-${stories[index - 1].id}`} class="nav-button">← PREVIOUS TALE</a>
              )}
              {index < stories.length - 1 && (
                <a href={`#story-${stories[index + 1].id}`} class="nav-button ml-auto">NEXT TALE →</a>
              )}
            </nav>
          </div>
        </div>
      </section>
    ))}

    <div class="fixed bottom-4 right-4 z-50">
      <a
        href="https://www.tensor.trade/trade/chads"
        target="_blank"
        rel="noopener noreferrer"
        class="inline-block bg-[#ffc131] text-white px-6 py-3 font-bold pixel-border hover:translate-y-[-2px] hover:shadow-xl transition-all duration-200"
      >
        BECOME A CHAD ↗
      </a>
    </div>

    <div class="fixed bottom-4 left-4 max-w-sm z-50 pointer-events-none">
      <div class="bg-black/80 text-[#ffc131] p-4 pixel-border">
        <p class="chad-quote pixel-edges"></p>
      </div>
    </div>
  </div>
</Layout>

<style>
  .pixel-edges {
    image-rendering: pixelated;
    -webkit-font-smoothing: none;
  }

  .pixel-border {
    border: 4px solid #2C3639;
    box-shadow: 
      4px 4px 0 #2C3639,
      -4px -4px 0 rgba(44, 54, 57, 0.1);
  }

  .nav-button {
    background: white;
    border: 2px solid #2C3639;
    padding: 0.75rem 1.5rem;
    font-weight: bold;
    transition: all 0.2s ease;
    box-shadow: 2px 2px 0 #2C3639;
  }

  .nav-button:hover {
    transform: translate(-2px, -2px);
    box-shadow: 4px 4px 0 #2C3639;
    color: #ffc131;
  }

  @keyframes float {
    0%, 100% { transform: translateY(0); }
    50% { transform: translateY(-10px); }
  }

  .animate-float {
    animation: float 3s ease-in-out infinite;
  }

  .chad-gradient {
    background: linear-gradient(45deg, #ffc131, #ff6b6b, #ffc131);
    -webkit-background-clip: text;
    -webkit-text-fill-color: transparent;
    background-size: 200% auto;
    animation: gradient 3s linear infinite;
  }

  @keyframes gradient {
    to { background-position: 200% center; }
  }

  .glitch-text {
    position: relative;
    animation: glitch 5s infinite;
  }

  @keyframes glitch {
    0% { transform: skew(0deg); }
    2% { transform: skew(10deg); }
    4% { transform: skew(-10deg); }
    6% { transform: skew(0deg); }
    100% { transform: skew(0deg); }
  }
</style>

<script>
  function initMatrix() {
    const canvas = document.getElementById('matrixCanvas') as HTMLCanvasElement;
    const ctx = canvas.getContext('2d')!;

    canvas.width = window.innerWidth;
    canvas.height = window.innerHeight;

    const chars = '01CHAD₿ΞDEGEN'.split('');
    const drops: number[] = Array(Math.floor(canvas.width/20)).fill(0);

    function draw() {
      ctx.fillStyle = 'rgba(245, 241, 227, 0.05)';
      ctx.fillRect(0, 0, canvas.width, canvas.height);
      
      ctx.fillStyle = '#ffc131';
      ctx.font = '20px monospace';
      
      drops.forEach((y, i) => {
        const char = chars[Math.floor(Math.random() * chars.length)];
        ctx.fillText(char, i * 20, y);
        
        if (y > canvas.height && Math.random() > 0.975) {
          drops[i] = 0;
        }
        drops[i] += 20;
      });
    }

    setInterval(draw, 50);

    window.addEventListener('resize', () => {
      canvas.width = window.innerWidth;
      canvas.height = window.innerHeight;
    });
  }

  function initPowerLevel() {
    const bar = document.querySelector('.power-bar') as HTMLElement;
    const level = document.querySelector('.power-level') as HTMLElement;
    let power = 9000;

    window.addEventListener('scroll', () => {
      const percent = (window.scrollY / (document.documentElement.scrollHeight - window.innerHeight)) * 100;
      bar.style.width = `${percent}%`;
      power = 9000 + Math.floor(percent * 100);
      level.textContent = power.toLocaleString();
    });
  }

  function initQuotes() {
    const quoteElement = document.querySelector('.chad-quote');
    if (!quoteElement) return;

    setInterval(() => {
      const randomQuote = CHAD_QUOTES[Math.floor(Math.random() * CHAD_QUOTES.length)];
      quoteElement.textContent = randomQuote;
    }, 5000);
  }

  document.addEventListener('DOMContentLoaded', () => {
    initMatrix();
    initPowerLevel();
    initQuotes();

    document.querySelectorAll('.reaction-btn').forEach(btn => {
      btn.addEventListener('click', (e) => {
        const count = (btn as HTMLElement).querySelector('span:last-child');
        if (count) count.textContent = (parseInt(count.textContent || '0') + 1).toString();
      });
    });
  });
</script>
